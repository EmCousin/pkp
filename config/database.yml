# PostgreSQL. Versions 9.1 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On OS X with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On OS X with MacPorts:
#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem 'pg'
#
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see Rails configuration guide
  # http://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  username: rails
  host: <%= ENV['DOCKER'] ? 'db' : ENV.fetch('DATABASE_HOST', 'localhost') %>
  port: 5432

sqlite: &sqlite
  adapter: sqlite3
  pool: 5
  timeout: 5000

primary: &primary
  <<: *default

cable: &cable
  <<: *sqlite
  migrations_paths: db/cable_migrate

cache: &cache
  <<: *sqlite
  migrations_paths: db/cache_migrate

queue: &queue
  <<: *sqlite
  migrations_paths: db/queue_migrate

local: &local
  username: <%= ENV['DOCKER'] ? 'rails' : nil %>
  password: <%= ENV['DOCKER'] ? 'password' : nil %>

live: &live
  host: <%= ENV['DB_HOST'] %>
  password: <%= Rails.application.credentials.dig(:db, :password) %>

development:
  primary:
    <<: *primary
    <<: *local
    database: pkp_development
  cable:
    <<: *cable
    database: storage/development_cable.sqlite3
  cache:
    <<: *cache
    database: storage/development_cache.sqlite3
  queue:
    <<: *queue
    database: storage/development_queue.sqlite3

  # The specified database role being used to connect to postgres.
  # To create additional roles in postgres see `$ createuser --help`.
  # When left blank, postgres will use the default role. This is
  # the same name as the operating system user that initialized the database.
  #username: pkp

  # The password associated with the postgres role (username).
  #password:

  # Connect on a TCP socket. Omitted by default since the client uses a
  # domain socket that doesn't need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  #host: localhost

  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.
  #port: 5432

  # Schema search path. The server defaults to $user,public
  #schema_search_path: myapp,sharedapp,public

  # Minimum log levels, in increasing order:
  #   debug5, debug4, debug3, debug2, debug1,
  #   log, notice, warning, error, fatal, and panic
  # Defaults to warning.
  #min_messages: notice

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  primary:
    <<: *primary
    <<: *local
    database: pkp_test
  cable:
    <<: *cable
    database: storage/test_cable.sqlite3
  cache:
    <<: *cache
    database: storage/test_cache.sqlite3
  queue:
    <<: *queue
    database: storage/test_queue.sqlite3

# As with config/secrets.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password as a unix environment variable when you boot
# the app. Read http://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full rundown on how to provide these environment variables in a
# production deployment.
#
# On Heroku and other platform providers, you may have a full connection URL
# available as an environment variable. For example:
#
#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# You can use this database configuration with:
#
#   production:
#     url: <%= ENV['DATABASE_URL'] %>
#
production:
  primary:
    <<: *primary
    <<: *live
    database: pkp_production
    sslmode: require
  cable:
    <<: *cable
    database: storage/production_cable.sqlite3
  cache:
    <<: *cache
    database: storage/production_cache.sqlite3
  queue:
    <<: *queue
    database: storage/production_queue.sqlite3
